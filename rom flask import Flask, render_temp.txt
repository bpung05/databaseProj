rom flask import Flask, render_template, request
from flask_login import login_required
from YourDatabaseModelModule import models  # Import your database models
import YourDatabaseModule as db  # Import your database module

app = Flask(__name__)

@app.route("/searchroster", methods=["GET", "POST"])
@login_required
def queryroster():

    def getBatting(team_given, year_given):
        # The same implementation as before
        pass

    def getPitching(team_given, year_given):
        # Add your implementation here to get pitching data
        pass

    def getValidYearsForTeam(team_given):
        # Get the valid years for the given team from the database
        valid_years = [year.yearID for year in models.teams.query.with_entities(models.teams.yearID).filter_by(name=team_given).distinct()]
        return valid_years

    teams = [team.name for team in models.teams.query.with_entities(models.teams.name).distinct().order_by(models.teams.name)]

    if request.method == 'POST':
        team = request.form['team']
        year = int(request.form['year'])

        # Check if the selected year is valid for the selected team
        valid_years = getValidYearsForTeam(team)
        if year not in valid_years:
            return render_template('queryroster.html', teams=teams, error="Invalid year selected.")

        batting_roster = getBatting(team, year)
        # pitching_roster = getPitching(team, year)  # Uncomment this when you implement getPitching

        return render_template('queryroster.html', team_output=team, year_output=year, teams=teams, batting_roster=batting_roster)

    return render_template('queryroster.html', teams=teams)


if __name__ == "__main__":
    app.run(debug=True)
And here's the updated queryroster.html template (assuming you have a dropdown select for both team and year):

html
Copy code
<!DOCTYPE html>
<html>
<head>
    <title>Search Roster</title>
</head>
<body>
    <h1>Search Roster</h1>
    <form method="post">
        <label for="team">Select a team:</label>
        <select id="team" name="team">
            {% for team in teams %}
                <option value="{{ team }}">{{ team }}</option>
            {% endfor %}
        </select>
        <br>
        <label for="year">Select a year:</label>
        <select id="year" name="year">
            <!-- The years options will be dynamically populated using JavaScript -->
        </select>
        <br>
        <input type="submit" value="Search">
    </form>
    {% if error %}
        <p>{{ error }}</p>
    {% endif %}
</body>
<script>
    // JavaScript to dynamically update the years dropdown based on the selected team
    const teamDropdown = document.getElementById('team');
    const yearDropdown = document.getElementById('year');

    const validYears = {
        {% for team in teams %}
            "{{ team }}": {{ getValidYearsForTeam(team)|tojson }},
        {% endfor %}
    };

    function updateYearsDropdown() {
        const selectedTeam = teamDropdown.value;
        yearDropdown.innerHTML = '';
        const years = validYears[selectedTeam];
        for (const year of years) {
            const option = document.createElement('option');
            option.value = year;
            option.innerText = year;
            yearDropdown.appendChild(option);
        }
    }

    teamDropdown.addEventListener('change', updateYearsDropdown);
    updateYearsDropdown(); // Call it initially to populate the years dropdown
</script>
</html>